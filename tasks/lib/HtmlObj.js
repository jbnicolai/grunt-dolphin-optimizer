// Generated by CoffeeScript 1.7.1
var CleanCSS, HtmlMinifier, HtmlObj, NOOPTIMIZE, PATH, Promise, UglifyJS, Util, endingHeadTagReg, externalResourceUrlReg, grunt, howReg, linkHrefReg, referenceHowReg, relativePathReg, scriptNodeReg, scriptSrcReg, scriptTagReg, styleTagReg, stylesheetNodeReg, _, _genFileName, _getMatchPhrase;

grunt = require('grunt');

Util = require('./util');

_ = require('underscore');

PATH = require('path');

Promise = Util.promise;

UglifyJS = require('uglify-js');

CleanCSS = require('clean-css');

HtmlMinifier = require('html-minifier');

scriptNodeReg = /<script[^>]*>(?:[\s\S]*?)<\/script\s*>/ig;

stylesheetNodeReg = /(<link([^>]*)\/>)|(<style[^>]*>(?:[\s\S]*?)<\/style\s*>)/ig;

linkHrefReg = /^<link[^>]+href=(?:"|')\s*(\S+)\s*(?:"|')/i;

scriptSrcReg = /^<script[^>]+src=(?:"|')\s*(\S+)\s*(?:"|')/i;

styleTagReg = /<(\/)?style(\s+[^>]+)*>/ig;

scriptTagReg = /<(\/)?script(\s+[^>]+)*>/ig;

referenceHowReg = /^<[^>]+data-how=(?:'|")(\w+)(?:'|")/i;

howReg = /data-how=(?:'|")(\w+)(?:'|")/ig;

endingHeadTagReg = /(<\/\s*head\s*>)/i;

externalResourceUrlReg = /url\(([^\)]+)\)/ig;

relativePathReg = /(^(?:\.|(?:\.\.))?[^\:\/][^\:]+$)/i;

NOOPTIMIZE = function(o) {
  return o;
};

_getMatchPhrase = function(input, reg) {
  var result;
  result = input.match(reg);
  return result != null ? result[1] : void 0;
};

_genFileName = function(type, pageName) {
  var ext, i, prefix;
  i = 1;
  prefix = type === 'js' ? "" + pageName + ".script." : "" + pageName + ".style.";
  ext = type === 'js' ? '.js' : '.css';
  return function() {
    return prefix + (i++) + ext;
  };
};

HtmlObj = (function() {
  function HtmlObj(paths, options) {
    this.paths = paths;
    this.options = options;
    this.init();
  }

  HtmlObj.prototype.init = function() {
    this.fileBasePath = PATH.dirname(this.paths.src);
    this.orgFileBasePath = PATH.dirname(this.paths.orgSrc);
    this.pageName = Util.fs.getFileNameWithoutExt(this.paths.src);
    this.genFileName = {
      js: _genFileName('js', this.pageName),
      css: _genFileName('css', this.pageName)
    };
    this.content = grunt.file.read(this.paths.src);
    this.outputExternalFiles = [];
    this.generatedFiles = [];
    this.optimizers = {
      js: this.options.optimizeOptions.js === true ? function(input) {
        return UglifyJS.minify(input, {
          fromString: true
        }).code;
      } : _.isObject(this.options.optimizeOptions.js) ? (function(_this) {
        return function(input) {
          return UglifyJS.minify(input, _.extend({
            fromString: true
          }, _this.options.optimizeOptions.js)).code;
        };
      })(this) : NOOPTIMIZE,
      css: this.options.optimizeOptions.css === true ? new CleanCSS().minify : _.isObject(this.options.optimizeOptions.css) ? new CleanCSS(this.options.optimizeOptions.css).minify : NOOPTIMIZE,
      html: this.options.optimizeOptions.html === true ? function(input) {
        return HtmlMinifier.minify(input, {});
      } : _.isObject(this.options.optimizeOptions.html) ? (function(_this) {
        return function(input) {
          return HtmlMinifier.minify(input, _this.options.optimizeOptions.html);
        };
      })(this) : NOOPTIMIZE
    };
    this.initResources();
    grunt.log.ok("htmlObj(" + this.paths.src + ") created!");
  };

  HtmlObj.prototype._makeNodeObj = function(type, how, url, pos) {
    var embedded, genUrl, outUrl, _url;
    embedded = how ? how === 'embedded' : this.options.embedded[type];
    _url = how === void 0 && !embedded ? (genUrl = PATH.join(this.fileBasePath, this.genFileName[type]()), this.outputExternalFiles.push(genUrl), genUrl) : embedded === true ? void 0 : url;
    outUrl = Util.fs.changeFileNameWithoutExt(_url, Util.fs.getFileNameWithoutExt(_url) + '.min');
    return {
      pos: pos,
      how: how,
      outUrl: outUrl,
      embedded: embedded,
      contentPromise: []
    };
  };

  HtmlObj.prototype._getReplaceFun = function(type, collection) {
    var hrefReg, pos, tagReg;
    pos = 1;
    if (type === 'js') {
      hrefReg = scriptSrcReg;
      tagReg = scriptTagReg;
    } else {
      hrefReg = linkHrefReg;
      tagReg = styleTagReg;
    }
    return (function(_this) {
      return function(scontent) {
        var getContent, how, href, isGenerated, nodeObj, placeholderStr, url;
        placeholderStr = "";
        how = _getMatchPhrase(scontent, referenceHowReg);
        if (how === 'ignore') {
          return scontent.replace(howReg, '');
        }
        isGenerated = /dolphin-traversal-generated/i.test(scontent);
        href = _getMatchPhrase(scontent, hrefReg);
        if (isGenerated) {
          _this.generatedFiles.push(href);
        }
        url = href ? Util.fs.isUrl(href) ? href : PATH.join(_this.fileBasePath, href) : void 0;
        if (collection.length === 0 || how || (collection.slice(-1)[0] && collection.slice(-1)[0].how)) {
          collection.push(_this._makeNodeObj(type, how, url, pos));
          if (type === 'css') {
            if (pos === 1) {
              placeholderStr = '\n<insert-stylesheets-placeholder>\n';
            }
          } else {
            placeholderStr = "<script-placeholder-begin>" + pos + "<script-placeholder-end>";
          }
          pos += 1;
        }
        nodeObj = collection.slice(-1)[0];
        getContent = (url ? Util.getContent(url) : Promise.resolve(scontent.replace(tagReg, ''))).then(function(content) {
          if (type === 'css') {
            if (url == null) {
              url = _this.paths.src;
            }
            return _this.resolveResourcePath(content, PATH.dirname(url, nodeObj.outUrl));
          } else {
            return content;
          }
        });
        nodeObj.contentPromise.push(getContent);
        return placeholderStr;
      };
    })(this);
  };

  HtmlObj.prototype.initResources = function() {
    this.scripts = [];
    this.stylesheets = [];
    this.content = this.content.replace(stylesheetNodeReg, this._getReplaceFun('css', this.stylesheets));
    return this.content = this.content.replace(scriptNodeReg, this._getReplaceFun('js', this.scripts));
  };

  HtmlObj.prototype.resolveResourcePath = function(content, srcPath, destPath) {
    var getNewRelativePath;
    if (destPath == null) {
      destPath = this.paths.src;
    }
    destPath = PATH.dirname(destPath);
    getNewRelativePath = function(oldRpath) {
      var absPath;
      absPath = PATH.resolve(srcPath, oldRpath);
      return Util.fs.pathToUrl(PATH.relative(destPath, absPath));
    };
    return content.replace(externalResourceUrlReg, function(m, resourcePath) {
      var resRelativePath;
      resourcePath = resourcePath.replace(/\s+/g, '').replace(/^("|')/, '').replace(/("|')/, '');
      resRelativePath = _getMatchPhrase(resourcePath, relativePathReg);
      if (resRelativePath === void 0) {
        return m;
      } else {
        return "url(" + (getNewRelativePath(resRelativePath)) + ")";
      }
    });
  };

  HtmlObj.prototype._contentOptimizingPromises = function(type, collection) {
    var dilimiter;
    dilimiter = type === 'js' ? ';' : '';
    return collection.map((function(_this) {
      return function(contentObj) {
        var combinedContent, optimizedContents;
        combinedContent = [];
        optimizedContents = contentObj.contentPromise.map(function(getContent) {
          return getContent.then(function(content) {
            return _this.optimizers[type](content);
          });
        });
        return Promise.reduce(optimizedContents, function(oc) {
          return combinedContent.push(oc);
        }).then(function() {
          contentObj.finalContent = combinedContent.join(dilimiter);
          return contentObj;
        });
      };
    })(this));
  };

  HtmlObj.prototype.processResources = function() {
    return Promise.all(this._contentOptimizingPromises('js', this.scripts).concat(this._contentOptimizingPromises('css', this.stylesheets))).then((function(_this) {
      return function() {
        var indexedScripts;
        _this.content = _this.content.replace(/<insert-stylesheets-placeholder>/i, function(placeholder) {
          return _this.stylesheets.map(function(styleObj) {
            if (styleObj.embedded) {
              return "<style type=\"text/css\">" + styleObj.finalContent + "</style>";
            } else {
              grunt.file.write(styleObj.outUrl, styleObj.finalContent);
              return "<link type=\"text/css\" rel=\"stylesheet\" href=\"" + (Util.fs.pathToUrl(PATH.relative(_this.fileBasePath, styleObj.outUrl))) + "\"/>";
            }
          }).join("\n");
        });
        indexedScripts = _.indexBy(_this.scripts, 'pos');
        _this.content = _this.content.replace(/<script-placeholder-begin>(\d+)<script-placeholder-end>/ig, function(placeHolder, pos) {
          var scriptObj;
          scriptObj = indexedScripts[pos];
          if (scriptObj.embedded) {
            return "\n<script type=\"text/javascript\">" + scriptObj.finalContent + "</script>\n";
          } else {
            grunt.file.write(scriptObj.outUrl, scriptObj.finalContent);
            return "\n<script type=\"text/javascript\" src=\"" + (Util.fs.pathToUrl(PATH.relative(_this.fileBasePath, scriptObj.outUrl))) + "\"></script>";
          }
        });
        _this.content = _this.optimizers.html(_this.content);
        _this.cleanupGeneratedFiles();
        grunt.log.ok("" + "Content optimized".blue + " (" + _this.paths.src + ")");
        return _this.content;
      };
    })(this));
  };

  HtmlObj.prototype.cleanupGeneratedFiles = function() {
    var gf, _i, _len, _ref, _results;
    _ref = this.generatedFiles;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      gf = _ref[_i];
      _results.push(grunt.file["delete"](PATH.join(this.fileBasePath, gf), {
        force: true
      }));
    }
    return _results;
  };

  return HtmlObj;

})();

module.exports = HtmlObj;
