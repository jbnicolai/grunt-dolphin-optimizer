// Generated by CoffeeScript 1.7.1
var Chalk, HtmlObj, HtmlOptimizerTask, PATH, Promise, Util, grunt, _;

_ = require('underscore');

grunt = require('grunt');

Util = require('./util');

Promise = Util.promise;

HtmlObj = require('./HtmlObj');

PATH = require('path');

Chalk = require('chalk');

HtmlOptimizerTask = (function() {
  function HtmlOptimizerTask(task) {
    var self;
    self = this;
    this.done = task.async();
    this.origTask = task;
    this.options = task.options(HtmlOptimizerTask.Defaults);
    this.options.embedded = {
      js: (this.options.embedded === true) || (this.options.embedded === 'js') ? true : false,
      css: (this.options.embedded === true) || (this.options.embedded === 'css') ? true : false
    };
    this.init();
  }

  HtmlOptimizerTask.prototype.init = function() {
    var dest, fileMaps, fileObj, src;
    grunt.log.writeln(Chalk.blue.bgWhite("Start copying src files..."));
    grunt.log.writeln("from: " + (Chalk.gray(this.options.srcPath)));
    grunt.log.writeln("to: " + (Chalk.gray(this.options.buildPath)));
    Util.copyFiles(this.options.srcPath, this.options.buildPath, {
      copyExcludes: ['**/*.html', 'src/**/*.*'],
      keepDest: false
    });
    grunt.log.ok(Chalk.cyan("Copying succeeded!"));
    grunt.log.writeln("");
    fileMaps = grunt.file.expandMapping('**/*.tvs', this.options.buildPath, {
      cwd: this.options.srcPath
    });
    grunt.log.writeln("");
    grunt.log.writeln("" + (Chalk.blue.bgWhite('Start initializing html objects...')));
    return this.htmlObjs = _.flatten((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = fileMaps.length; _i < _len; _i++) {
        fileObj = fileMaps[_i];
        dest = fileObj.dest;
        src = fileObj.src.filter(function(s) {
          if (!grunt.file.exists(s)) {
            grunt.log.error("Source file " + s + " not found.");
            false;
          }
          return true;
        });
        _results.push(src.map(function(s) {
          return {
            src: dest,
            orgSrc: src,
            dest: Util.fs.changeExtName(dest, '.html')
          };
        }));
      }
      return _results;
    })()).map((function(_this) {
      return function(fm) {
        var htmlObj;
        htmlObj = new HtmlObj(fm, _this.options);
        return htmlObj;
      };
    })(this));
  };

  HtmlOptimizerTask.prototype.run = function() {
    grunt.log.writeln("");
    grunt.log.writeln("" + (Chalk.blue.bgWhite('Start optimizing (include minifying,concatenation, and relative path fixing)...')));
    Promise.all(this.htmlObjs.map(function(htmlObj) {
      return htmlObj.processResources().then(function(content) {
        grunt.file.write(htmlObj.paths.dest, content);
        return grunt.log.ok("" + "Output html succeeded!".green + " (" + htmlObj.paths.dest + ")");
      }).then(function() {
        grunt.file["delete"](htmlObj.paths.src, {
          force: true
        });
        return grunt.log.ok("" + "Delete tvs succeeded!".cyan + " (" + htmlObj.paths.src + ")");
      });
    })).then((function(_this) {
      return function() {
        grunt.log.writeln("");
        grunt.log.writeln(Chalk.green.bgYellow("Generated external files:"));
        return _this.htmlObjs.forEach(function(htmlObj) {
          return htmlObj.outputExternalFiles.forEach(function(outFile) {
            return grunt.log.writeln(Chalk.gray(outFile));
          });
        });
      };
    })(this)).then((function(_this) {
      return function() {
        grunt.log.writeln("");
        grunt.log.writeln(Chalk.blue.bgWhite("Begin clean up..."));
        grunt.file.expand({
          cwd: _this.options.srcPath,
          filter: 'isFile'
        }, '**/*.tvs').forEach(function(tvsFilePath) {
          return grunt.file["delete"](PATH.join(_this.options.srcPath, tvsFilePath), {
            force: true
          });
        });
        _this.htmlObjs.forEach(function(htmlObj) {
          return htmlObj.generatedFiles.forEach((function(_this) {
            return function(gf) {
              return grunt.file["delete"](PATH.join(htmlObj.orgFileBasePath, gf), {
                force: true
              });
            };
          })(this));
        });
        return grunt.log.ok(Chalk.cyan("Clean up finished!"));
      };
    })(this)).then((function(_this) {
      return function() {
        grunt.log.writeln("");
        grunt.log.ok(Chalk.cyan("Optimizing succeeded!"));
        return _this.done();
      };
    })(this))["catch"](grunt.log.error);
  };

  HtmlOptimizerTask.Defaults = {
    srcPath: 'src',
    buildPath: 'build',
    embedded: 'css',
    optimizeOptions: {
      js: true,
      css: true,
      html: {
        removeComments: true,
        collapseWhitespace: true
      }
    }
  };

  HtmlOptimizerTask.taskName = 'dolphin-optimizer';

  HtmlOptimizerTask.taskDescription = 'Optimize tvs files utilizing "uglify-js", "clean-css" and "html-minifier", resolve all the resource paths referred by the files and output files ready to deploy';

  HtmlOptimizerTask.registerWithGrunt = function(grunt) {
    grunt.registerMultiTask(HtmlOptimizerTask.taskName, HtmlOptimizerTask.taskDescription, function() {
      var task;
      task = new HtmlOptimizerTask(this);
      task.run();
    });
  };

  return HtmlOptimizerTask;

})();

module.exports = HtmlOptimizerTask;
